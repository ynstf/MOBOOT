
              ----------------------------------------
              ----------------------------------------
              # Flask BOOT By : ynstf #
              ----------------------------------------
              ----------------------------------------

1. Introduction [×]

2. Structuring The Application Directory [×] :

  1. Creating A Virtual Environment
  2. Creating Application Folder
  3. Creating Application Files
  4. Installing Flask

3. The Application [×] :

  1. Edit config/settings.py
  2. Edit .env file
  3. Edit app/__init__.py
  4. Edit run.py file
  5. Run the server : python3 run.py

4. Working with Blueprints [×] :

  - Create module's template (templates/home/index.html)
  - Create module's controller (views/home.py)
  - Edit (app/__init__.py), add Blueprints & Register them
  - Run the server : python3 run.py
  - Create an Sample HTTP error handling (app/__init__.py)
  - Create an HTTP 404 Error page (templates/errors/404.html)

5. Adding bootstrap to our project [×] :

  - Create (css,js,images,fonts) folders in static folder.
  - Add bootstrap files to the project.
  - Add jQuery file.
  - Add font-awesome library v4.
  - Add custom css file (main.css).
  - Add custom js file (main.js).

6. Working with templates (Jinja2) [×] :

  - Installing Jinja2

    >> pip3 install Jinja2

  - Create templates/layout.html file.
  - Pass title to the template (modify home.py)
  - Modify templates/home/index.html (extend from layout.html)
  - Pass title to the template (404 page) (modify __init__.py)
  - Modify templates/errors/404.html (extend from layout.html)

7. Working with models [×] :

  - install Flask-SQLAlchemy(pip3 install flask-sqlalchemy) + driver(pip3 install pymysql)
  - Add SQLAlchemy connection URI to Configuration file (settings.py & .env)
  - Create models/__init__.py file.
  - Create models/users.py file (user's model)
  - Edit models/__init__.py file.
  - Edit models/users.py file.
  - Add views/auth.py file.
  - Edit app/__init__.py (Blueprints part & Database)
  - Add templates/auth folder (template's auth)
    - login page
    - register page

8. Working with templates (login page, register page, navigation, 404, etc.) [×]

  - Adding navigation to templates/layout.html
  - Create forms/__init__.py file.
  - Create forms/users.py file.
  - Editing forms/users.py (coding register & login form's classes)
  - Editing views/auth.py file (setup routes for login & register)
  - Editing views/auth.py file (adding forms to templates)
  - Coding register form (Design)
  - Coding login form (Design)
  - Coding 404 page (Desing)

9. Working with routes (login & regsiter & logout) [×]

  - Using macros to avoid repetetion code in forms:
      Create/Editing templates/_renderForm.html file.
  - Edit templates/auth/register.html (add macro)
  - Editing views/auth.py file (coding process operation for register)
  - Editing views/auth.py file (coding process operation for login)
  - Editing models/users.py (inherite from UserMixin):
      - Install Flask-Login plugin.
      # The UserMixin will add Flask-Login attributes to our model so Flask-Login will be able to work with it.
  - Editing app/__init__.py file (add flask-login configuration, user loader):
      # A user loader tells Flask-Login how to find a specific user from the ID that is stored in their session cookie.
  - Editing views/auth.py (working with process login)
  - Editing views/auth.py file (coding process operation for logout)
  - Editing templates/layout.html (add current_user.is_authenticated)
  - Editing templates/home/index.html (show the right view for user/visitor) ======= DON'T FORGET CSS styles =======

10. working with Post model include(migrations,relationships) [×]

  - install flask-migrate ext & flask-script:
    - pip3 install Flask-Migrate
    - pip3 install Flask-Script
  - create \app\models\posts.py
  - edit \app\__init__.py (add migrate & Post model)
  - delete ENV from .env & add FLASK_ENV & FLASK_APP
  - edit config/settings.py
  - edit app/__init__.py (line 15)
  - edit run.py (add if __name__ == ...)
  - Test migrations
  - Test relationships (User & Post)

11. working with APIs [×]

  - install flask-restful ext:
    - pip3 install flask-restful
  - create app\API folder
  - create app\API\__init__.py & resources.py files
  - edit resources.py file
  - add api to app\__init_.py file
  - install marshmallow ext:
    - pip3 install flask-marshmallow
    - pip3 install marshmallow-sqlalchemy
    - pip3 install marshmallow
  - add marshmallow to app\__init__.py
  - edit models\__init__.py (add ma)
  - edit models\users.py (add schemas)
  - Test API

12. Refactoring Code (Use Application Factory) [×]

13. Set Gravatar to users [×]
  - install flask-gravatar ext:
    - pip install flask-gravatar
  - add gravatar ext to app\__init__.py
  - use gravatar in app\templates\home\index.html file.
  - modify stylesheets in app\static\css\main.css file.

14. Secure REST API - JWT Authentication [×]

  - install flask-jwt-extended:
    - pip install flask-jwt-extended
  - add flask-jwt-extended to app\__init__.py file.
  - add JWT configuration to config/settings.py file.
  - create TEST API endpoint in app\API\resources.py file.
  - add Test API resource to app\API\__init__.py file.
  - test the API endpoint.
  - add jwt_required to TestResource & test the API again.
  - create JWT access token in login proccess and logout proccess.
  - test the API again.
